import numpy as np
import os
import matplotlib.pyplot as plt

cls_num=22
labels=[1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,
        12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,
        20,20,20,20,20,21,21,21,21,21,22,22,22,22,22]
#改进前
# predicted=[3,1,5,15,1,22,2,2,2,2,21,1,3,3,3,9,4,20,2,4,6,3,6,9,5,5,6,6,6,6,7,11,7,7,7,8,22,12,22,8,9,9,9,7,7,10,10,10,12,10,11,11,11,11,11,
#         12,12,12,14,12,13,13,13,13,13,14,14,14,14,14,15,21,22,15,6,16,16,16,16,16,17,17,17,17,17,18,1,20,22,18,19,19,19,19,19,
#         20,20,20,20,20,21,1,1,21,21,22,22,2,22,22]
# 改进后
# predicted=[1,1,3,1,1,2,2,2,2,2,3,3,3,3,3,2,4,20,4,4,5,5,5,6,5,6,6,6,6,6,7,7,7,7,7,8,8,8,2,8,9,9,9,9,9,10,10,10,18,10,11,11,11,11,11,
#         12,12,12,14,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,2,16,16,16,16,16,17,17,17,17,17,18,18,18,5,18,19,19,19,19,19,
#         20,20,20,20,20,21,21,21,21,21,22,22,22,22,22]

# 20
# predicted=[1,1,1,1,1,15,2,2,2,2,3,3,3,17,3,2,4,8,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,2,8,9,9,9,9,9,10,10,10,4,10,11,11,11,11,11,
#         12,12,12,14,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,3,17,17,17,17,18,18,17,14,18,19,19,19,19,19,
#         20,20,20,20,20,21,21,21,21,21,2,22,22,22,22]
# 40
# predicted=[1,1,2,21,21,8,2,4,22,4,3,3,3,7,3,2,4,10,22,4,5,6,6,5,5,5,6,6,5,6,7,7,9,7,7,18,8,8,10,8,19,9,9,9,9,10,10,10,18,10,11,17,11,11,11,
#         12,12,12,21,12,13,13,13,13,13,14,7,14,14,14,15,9,15,15,10,16,16,16,16,12,3,17,17,17,17,13,18,2,19,19,19,22,20,6,19,
#         20,20,20,13,22,21,21,9,21,21,10,22,22,22,22]
# BP
predicted=[1,1,1,2,1,2,2,21,12,2,3,13,15,3,3,4,4,4,4,4,5,5,15,5,5,6,6,8,6,6,7,17,7,21,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,
        12,12,12,12,12,13,13,13,8,13,14,14,14,14,14,15,15,17,15,15,16,16,16,16,16,17,17,20,17,17,18,18,18,18,18,19,22,19,19,19,
        20,20,20,20,20,21,21,21,21,21,22,22,22,22,22]


# labels=[1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22]
# predicted=[1,1,1,2,8,2,3,3,3,4,10,4,5,5,5,6,10,6,7,18,7,21,8,8,9,9,9,10,10,15,11,11,11,12,12,12,13,18,13,14,14,14,15,15,15,16,16,16,17,20,21,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22]

# cls_num = 23
# labels = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18.18,19,19,19,20,20,20,21,21,21,22,22,22]
# predicted = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18.18,19,19,19,20,20,20,21,21,21,22,22,22]
# 第一步：创建混淆矩阵
# 获取类别数，创建 N*N 的零矩阵
conf_mat = np.zeros([cls_num, cls_num])
print(conf_mat)
# 第二步：获取真实标签和预测标签
# labels 为真实标签，通常为一个 batch 的标签
# predicted 为预测类别，与 labels 同长度
# 第三步：依据标签为混淆矩阵计数
# print(len(labels))
for i in range(len(labels)):
    true_i = np.array(labels[i])
    pre_i = np.array(predicted[i])
    # print(true_i,pre_i)
    conf_mat[true_i-1, pre_i-1] += 1
print(conf_mat)
# ----------------RuntimeWarning: invalid value encountered in true_divide----------#
np.seterr(divide='ignore', invalid='ignore')


def show_confMat(confusion_mat, classes_name, set_name, out_dir):
    """
    可视化混淆矩阵，保存png格式
    :param confusion_mat: nd-array
    :param classes_name: list,各类别名称
    :param set_name: str, eg: 'valid', 'train'
    :param out_dir: str, png输出的文件夹
    :return:
    """
    # 归一化
    confusion_mat_N = confusion_mat.copy()
    # for i in range(len(classes_name)):
    #     confusion_mat_N[i, :] = confusion_mat[i, :] / confusion_mat[i, :].sum()
    #
    # # 获取颜色
    cmap = plt.cm.get_cmap('Pastel1')  # 更多颜色: http://matplotlib.org/examples/color/colormaps_reference.html
    plt.imshow(confusion_mat_N, cmap=cmap)
    # plt.colorbar()

    # 设置文字
    xlocations = np.array(range(len(classes_name)))
    plt.xticks(xlocations, classes_name, rotation=60)
    plt.yticks(xlocations, classes_name)
    plt.xlabel('预测的动作')
    plt.ylabel('实际的动作')
    plt.title('混淆矩阵' )
    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    # 打印数字
    for i in range(confusion_mat_N.shape[0]):
        for j in range(confusion_mat_N.shape[1]):
            s = int(confusion_mat[i,j])
            # print(s)
            if(s!=0):
                plt.text(x=j, y=i, s=int(confusion_mat[i, j]), va='center', ha='center', color='red', fontsize=12)
            else:
                plt.text(x=j, y=i, s=int(confusion_mat[i, j]), va='center', ha='center', color='black', fontsize=12)

    # 保存
    plt.savefig(os.path.join(out_dir, 'Confusion_Matrix_' + set_name + '.png'))
    plt.close()


# 函数调用示例
show_confMat(conf_mat, ['a1', 'a2', 'a3', 'a4', 'a5','a6','a7','a8','a9','a10','a11','a12','a13','a14','a15','a16','a17','a18','a19','a20','a21','a22'], "train", "./")
